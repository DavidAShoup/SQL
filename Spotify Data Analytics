-- For this project, I downloaded Spotify data from Kaggle.
-- Then I created a table to insert Spotify data into.
-- Finally, I performed analytics on the data using SQL. 

--Creating the table
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )
;

--Then I inserted the Spotify Data .csv into the table.

--Next, I explored the data using the following SQL

-- What is the average populatrity for each artist
SELECT artist_name, ROUND(AVG(popularity), 2) AS avg_popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(popularity) DESC;

--What is the danceability rating for tracks with a popularity rating is at or above 90?
SELECT track_name, danceability
FROM BIT_DB.Spotifydata
WHERE popularity >= 90
GROUP BY track_name
ORDER BY danceability DESC;

--What is the engery rating for tracks with a popularity rating is at or above 90?
SELECT track_name, energy
FROM BIT_DB.Spotifydata
WHERE popularity >= 90
GROUP BY track_name
ORDER BY energy DESC;--

--What top 10 most danceable artists?
SELECT artist_name, ROUND(AVG(danceability), 2) AS danceability_by_artist
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY danceability DESC
LIMIT 10;

--What is the total duration for all tracks for each artist, organized from most to least?
SELECT artist_name, SUM(duration_ms) AS total_duration
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY duration_ms DESC;

--What is the average enegry level for each range of popularity?
SELECT ROUND(AVG(energy), 2) AS avg_energy,
CASE WHEN popularity >= 90 THEN "Popular 90+"
    WHEN popularity >= 80 THEN "Popular 80+"
    WHEN popularity >= 70 THEN "Popular 70+"
    ELSE "Popular 69 or less"
    END AS Popularity_Text
FROM BIT_DB.Spotifydata
GROUP BY Popularity_Text
ORDER BY Popularity_Text DESC;
 
